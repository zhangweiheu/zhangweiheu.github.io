<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>流云</title>
  <subtitle>不忘初心，方得始终</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="zhangweiheu.github.io/"/>
  <updated>2016-05-08T06:49:43.704Z</updated>
  <id>zhangweiheu.github.io/</id>
  
  <author>
    <name>zhangwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker修改系统时区</title>
    <link href="zhangweiheu.github.io/2016/05/08/Docker%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%97%B6%E5%8C%BA/"/>
    <id>zhangweiheu.github.io/2016/05/08/Docker修改系统时区/</id>
    <published>2016-05-08T06:13:51.000Z</published>
    <updated>2016-05-08T06:49:43.704Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Ubantu修改系统时区&quot;&gt;&lt;a href=&quot;#Ubantu修改系统时区&quot; class=&quot;headerlink&quot; title=&quot;Ubantu修改系统时区&quot;&gt;&lt;/a&gt;Ubantu修改系统时区&lt;/h3&gt;&lt;p&gt;直接修改/etc/timezone&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;Asia/shanghai&amp;quot; &amp;gt; /etc/timezone&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### Centos修改系统时区  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```shell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      Linux修改系统时区
    
    </summary>
    
      <category term="Docker" scheme="zhangweiheu.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="zhangweiheu.github.io/tags/Docker/"/>
    
      <category term="TimeZone" scheme="zhangweiheu.github.io/tags/TimeZone/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB备份与恢复命令</title>
    <link href="zhangweiheu.github.io/2016/05/05/MongoDB%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D%E5%91%BD%E4%BB%A4/"/>
    <id>zhangweiheu.github.io/2016/05/05/MongoDB备份与恢复命令/</id>
    <published>2016-05-05T12:19:45.000Z</published>
    <updated>2016-05-05T13:42:18.542Z</updated>
    
    <content type="html">&lt;p&gt;先到mongodb/bin/目录下&lt;/p&gt;
&lt;h3 id=&quot;备份&quot;&gt;&lt;a href=&quot;#备份&quot; class=&quot;headerlink&quot; title=&quot;备份&quot;&gt;&lt;/a&gt;备份&lt;/h3&gt;&lt;p&gt;./mongodump –db xxx(数据库名称)  –out /xxx/(备份路径)&lt;br&gt;默认路径在当前路径下：dump/xxx   &lt;/p&gt;
&lt;h3 id=&quot;恢复&quot;&gt;&lt;a href=&quot;#恢复&quot; class=&quot;headerlink&quot; title=&quot;恢复&quot;&gt;&lt;/a&gt;恢复&lt;/h3&gt;&lt;p&gt;./mongorestore –db xxx(数据库名称) ./xxx(数据库备份路径)&lt;/p&gt;
&lt;h3 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h3&gt;&lt;hr&gt;
</content>
    
    <summary type="html">
    
      MongoDB备份与恢复命令
    
    </summary>
    
      <category term="MongoDB" scheme="zhangweiheu.github.io/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="zhangweiheu.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Tar命令</title>
    <link href="zhangweiheu.github.io/2016/05/05/tar%E5%91%BD%E4%BB%A4/"/>
    <id>zhangweiheu.github.io/2016/05/05/tar命令/</id>
    <published>2016-05-05T12:13:16.000Z</published>
    <updated>2016-05-15T09:13:25.986Z</updated>
    
    <content type="html">&lt;h3 id=&quot;解压命令&quot;&gt;&lt;a href=&quot;#解压命令&quot; class=&quot;headerlink&quot; title=&quot;解压命令&quot;&gt;&lt;/a&gt;解压命令&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tar -zxvf ./xxx.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;压缩命令&quot;&gt;&lt;a href=&quot;#压缩命令&quot; class=&quot;headerlink&quot; title=&quot;压缩命令&quot;&gt;&lt;/a&gt;压缩命令&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tar -czvf ./xxx.tar.gz xxx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h3&gt;&lt;p&gt; Cannot open: Permission denied;&lt;br&gt;  没有权限&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      tar命令
    
    </summary>
    
      <category term="Linux" scheme="zhangweiheu.github.io/categories/Linux/"/>
    
    
      <category term="tar" scheme="zhangweiheu.github.io/tags/tar/"/>
    
  </entry>
  
  <entry>
    <title>Vim</title>
    <link href="zhangweiheu.github.io/2016/04/29/Vim/"/>
    <id>zhangweiheu.github.io/2016/04/29/Vim/</id>
    <published>2016-04-29T10:21:30.000Z</published>
    <updated>2016-05-04T03:20:06.284Z</updated>
    
    <content type="html">&lt;h4 id=&quot;Ubantu安装软件异常&quot;&gt;&lt;a href=&quot;#Ubantu安装软件异常&quot; class=&quot;headerlink&quot; title=&quot;Ubantu安装软件异常&quot;&gt;&lt;/a&gt;Ubantu安装软件异常&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Unable to locate package vim&lt;/li&gt;
&lt;li&gt;Package ‘vim-nox’ has no installation candidate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方法：apt-get update  &lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      Ubantu安装软件异常
    
    </summary>
    
      <category term="Linux" scheme="zhangweiheu.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="zhangweiheu.github.io/tags/Linux/"/>
    
      <category term="Vim" scheme="zhangweiheu.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins插件</title>
    <link href="zhangweiheu.github.io/2016/04/28/Jenkins%E6%8F%92%E4%BB%B6/"/>
    <id>zhangweiheu.github.io/2016/04/28/Jenkins插件/</id>
    <published>2016-04-28T14:32:53.000Z</published>
    <updated>2016-05-04T03:19:15.285Z</updated>
    
    <content type="html">&lt;h3 id=&quot;安装jenkins后“可选插件”列表为空&quot;&gt;&lt;a href=&quot;#安装jenkins后“可选插件”列表为空&quot; class=&quot;headerlink&quot; title=&quot;安装jenkins后“可选插件”列表为空&quot;&gt;&lt;/a&gt;安装jenkins后“可选插件”列表为空&lt;/h3&gt;&lt;p&gt;因为插件站点被qiang,解决方法：更换插件源&lt;br&gt;选择插件管理-&amp;gt;高级-&amp;gt;升级站点-&amp;gt;更改url为：&lt;a href=&quot;http://mirror.xmission.com/jenkins/updates/update-center.json&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mirror.xmission.com/jenkins/updates/update-center.json&lt;/a&gt; 点击提交&lt;br&gt;完事&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      jenkins后“可选插件”列表为空
    
    </summary>
    
      <category term="Jenkins" scheme="zhangweiheu.github.io/categories/Jenkins/"/>
    
    
      <category term="Docker" scheme="zhangweiheu.github.io/tags/Docker/"/>
    
      <category term="Jenkins" scheme="zhangweiheu.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="zhangweiheu.github.io/2016/04/27/Docker/"/>
    <id>zhangweiheu.github.io/2016/04/27/Docker/</id>
    <published>2016-04-27T05:05:50.000Z</published>
    <updated>2016-05-04T03:18:28.741Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Docker学习&quot;&gt;&lt;a href=&quot;#Docker学习&quot; class=&quot;headerlink&quot; title=&quot;Docker学习&quot;&gt;&lt;/a&gt;Docker学习&lt;/h2&gt;&lt;h3 id=&quot;docker安装-系统必须64位&quot;&gt;&lt;a href=&quot;#docker安装-系统必须64位&quot; class=&quot;headerlink&quot; title=&quot;docker安装(系统必须64位)&quot;&gt;&lt;/a&gt;docker安装(系统必须64位)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;centos7:yun install docker,由于docker国内官方没有站点，比较慢，所以建议使用镜像站，安装docker&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;dockerfile构建新的镜像&quot;&gt;&lt;a href=&quot;#dockerfile构建新的镜像&quot; class=&quot;headerlink&quot; title=&quot;dockerfile构建新的镜像&quot;&gt;&lt;/a&gt;dockerfile构建新的镜像&lt;/h3&gt;&lt;h5 id=&quot;基本指令&quot;&gt;&lt;a href=&quot;#基本指令&quot; class=&quot;headerlink&quot; title=&quot;基本指令&quot;&gt;&lt;/a&gt;基本指令&lt;/h5&gt;&lt;p&gt;  RUN：镜像构建时要运行的命令，不同于使用docker run启动容器；&lt;br&gt;  CMD：容器启动时要运行的命令，docker run中的命令会覆盖CMD中的命令；eg:CMD[“bash”,”-1”]&lt;br&gt;  ENTRYPOINT：类似于CMD指令，但是该指令不容易在容器启动时被覆盖，而docker run中的参数会被再次传递给ENTRYPOINT；eg：ENTRYPOINT[“nginx”,”-g”,”daemon off”]&lt;br&gt;  WORKDIR：&lt;br&gt;  ENV：&lt;br&gt;  USER：指定该镜像以什么身份去运行；eg:USER zhangwei:administor&lt;br&gt;  VOLUME：用来向基于镜像的容器添加卷&lt;br&gt;  ADD：复制并解压文件&lt;br&gt;  COPY：只是复制文件&lt;br&gt;  ONBUILD：为镜像添加触发器，&lt;br&gt;  docker 命令 ：docker exec -it containerID/NAME /bin/bash  &lt;/p&gt;
&lt;h3 id=&quot;Docker基本命令&quot;&gt;&lt;a href=&quot;#Docker基本命令&quot; class=&quot;headerlink&quot; title=&quot;Docker基本命令&quot;&gt;&lt;/a&gt;Docker基本命令&lt;/h3&gt;&lt;p&gt;$ sudo docker   # docker命令帮助&lt;br&gt;Usage: docker [OPTIONS] COMMAND [arg…]&lt;br&gt; -H=[unix:///var/run/docker.sock]: tcp://host:port to bind/connect to or unix://path/to/socket to use&lt;/p&gt;
&lt;p&gt;A self-sufficient runtime for linux containers.&lt;/p&gt;
&lt;p&gt;Commands:&lt;br&gt;    attach    Attach to a running container                 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;          # 当前shell下attach连接指定运行镜像  
build     Build an image from a Dockerfile              
          # 通过Dockerfile定制镜像
commit    Create a new image from a container&amp;apos;s changes 
          # 提交当前容器为新的镜像
cp        Copy files/folders from the containers filesystem to the host path  
          # 从容器中拷贝指定文件或者目录到宿主机中  
diff      Inspect changes on a container&amp;apos;s filesystem   
          # 查看docker容器变化  
events    Get real time events from the server          
          # 从docker服务获取容器实时事件
export    Stream the contents of a container as a tar archive     
          # 导出容器的内容流作为一个tar归档文件[对应import]  
history   Show the history of an image    
          # 展示一个镜像形成历史  
images    List images    # 列出系统当前镜像  
import    Create a new filesystem image from the contents of a tarball    
          # 从tar包中的内容创建一个新的文件系统映像[对应export]  
info      Display system-wide information   # 显示系统相关信息    
inspect   Return low-level information on a container    
          # 查看容器详细信息  
kill      Kill a running container                        
          # kill指定docker容器  
load    Load an image from a tar archive               
       # 从一个tar包中加载一个镜像[对应save]   login     Register or Login to the docker registry server   
          # 注册或者登陆一个docker源服务器  
logs      Fetch the logs of a container  
          # 输出当前容器日志信息
port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT  
          # 查看映射端口对应的容器内部源端口  
pause     Pause all processes within a container          
          # 暂停容器  
ps        List containers                               
          # 列出容器列表  
pull      Pull an image or a repository from the docker registry server  
          # 从docker镜像源服务器拉取指定镜像或者库镜像  
push      Push an image or a repository to the docker registry server  
          # 推送指定镜像或者库镜像至docker源服务器  
restart   Restart a running container                   
          # 重启运行的容器    
rm        Remove one or more containers                   
          # 移除一个或者多个容器    
rmi       Remove one or more images                 
          # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或-f强制删除]    
run       Run a command in a new container
          # 在一个新的容器中运行一个命令    
save      Save an image to a tar archive  
          # 保存一个镜像为一个tar包[对应load]  
search    Search for an image in the docker index       
          # 在docker index中搜索镜像  
start     Start a stopped containers                    # 启动容器
stop      Stop a running containers                     # 停止容器
tag       Tag an image into a repository                # 给源中镜像打标签
top       Lookup the running processes of a container   # 查看容器中运行的进程信息
unpause   Unpause a paused container                    # 取消暂停容器
version   Show the docker version information           # 查看docker版本号
wait      Block until a container stops, then print its exit code   
          # 截取容器停止时的退出状态值
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
</content>
    
    <summary type="html">
    
      Docker学习
    
    </summary>
    
      <category term="Docker" scheme="zhangweiheu.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="zhangweiheu.github.io/tags/Docker/"/>
    
      <category term="Dockerfile" scheme="zhangweiheu.github.io/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Java线程状态知识点</title>
    <link href="zhangweiheu.github.io/2016/04/18/Java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>zhangweiheu.github.io/2016/04/18/Java线程状态知识点/</id>
    <published>2016-04-18T08:34:52.000Z</published>
    <updated>2016-04-29T10:32:24.675Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Thread和Runnable实现线程的异同&quot;&gt;&lt;a href=&quot;#Thread和Runnable实现线程的异同&quot; class=&quot;headerlink&quot; title=&quot;Thread和Runnable实现线程的异同&quot;&gt;&lt;/a&gt;Thread和Runnable实现线程的异同&lt;/h2&gt;&lt;h3 id=&quot;相同点&quot;&gt;&lt;a href=&quot;#相同点&quot; class=&quot;headerlink&quot; title=&quot;相同点&quot;&gt;&lt;/a&gt;相同点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;都是多线程实现的方式  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;不同点&quot;&gt;&lt;a href=&quot;#不同点&quot; class=&quot;headerlink&quot; title=&quot;不同点&quot;&gt;&lt;/a&gt;不同点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Thread是类，而Runnable是接口；Thread是实现了Runnable接口的类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Runnable具有更好的扩展性，即多个线程都是基于某一个Runnable对象建立的，它们会共享Runnable对象的资源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Thread类包含的start-和Run-方法的区别&quot;&gt;&lt;a href=&quot;#Thread类包含的start-和Run-方法的区别&quot; class=&quot;headerlink&quot; title=&quot;Thread类包含的start()和Run()方法的区别&quot;&gt;&lt;/a&gt;Thread类包含的start()和Run()方法的区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;start()：它的作用是启动一个新的线程，新线程会执行相应的Run()方法；start()不能被重复调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;run():与普通的成员方法一样，可以被重复调用。单独调用会在当前线程中执行run(),而不会启动新线程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;线程状态sleep-、yield-、wait-区别&quot;&gt;&lt;a href=&quot;#线程状态sleep-、yield-、wait-区别&quot; class=&quot;headerlink&quot; title=&quot;线程状态sleep()、yield()、wait()区别&quot;&gt;&lt;/a&gt;线程状态sleep()、yield()、wait()区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;sleep()会给其他线程运行的机会，而不考虑其他线程的优先级，因此会给较低优先级的线程一个运行的机会；yield()只会给不小于自己优先级的线程一个运行的机会。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当线程执行sleep()方法后，参数long millis指定睡眠时间，转到阻塞状态；当线程执行yield()方法后进入就绪状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sleep()方法声明抛出InterruptedException异常，而yield()方法没有声明异常。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sleep()比yield()方法具有更好的移植性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线程调用自身的sleep()或者其他线程的join()方法，进入阻塞状态，该状态停止当前线程但不释放资源，当sleep()或者join()的线程结束以后进入就绪状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Object.wait()对象锁，释放资源，notify()唤醒回到wait()前中断现场。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150827111349802&quot; alt=&quot;线程状态转换&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      线程状态知识
    
    </summary>
    
      <category term="Java基础" scheme="zhangweiheu.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="多线程" scheme="zhangweiheu.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Maven本地安装jar文件</title>
    <link href="zhangweiheu.github.io/2016/04/17/Maven%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85jar%E6%96%87%E4%BB%B6/"/>
    <id>zhangweiheu.github.io/2016/04/17/Maven本地安装jar文件/</id>
    <published>2016-04-17T12:54:59.000Z</published>
    <updated>2016-05-15T09:01:38.972Z</updated>
    
    <content type="html">&lt;h3 id=&quot;maven本地仓库安装jar包和源码&quot;&gt;&lt;a href=&quot;#maven本地仓库安装jar包和源码&quot; class=&quot;headerlink&quot; title=&quot;maven本地仓库安装jar包和源码&quot;&gt;&lt;/a&gt;maven本地仓库安装jar包和源码&lt;/h3&gt;&lt;h4 id=&quot;安装依赖包&quot;&gt;&lt;a href=&quot;#安装依赖包&quot; class=&quot;headerlink&quot; title=&quot;安装依赖包&quot;&gt;&lt;/a&gt;安装依赖包&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mvn install:install-file -Dfile=D:/spymemcached-2.10.3.jar -DgroupId=net.spy -DartifactId=spymemcached -Dversion=2.10.3 -Dpackaging=jar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;安装source类的源码&quot;&gt;&lt;a href=&quot;#安装source类的源码&quot; class=&quot;headerlink&quot; title=&quot;安装source类的源码&quot;&gt;&lt;/a&gt;安装source类的源码&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mvn install:install-file -Dfile=D:/spymemcached-2.10.3-sources.jar -DgroupId=net.spy -DartifactId=spymemcached -Dversion=2.10.3 -Dpackaging=jar -Dclassifier=sources&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;安装javadoc类的源码&quot;&gt;&lt;a href=&quot;#安装javadoc类的源码&quot; class=&quot;headerlink&quot; title=&quot;安装javadoc类的源码&quot;&gt;&lt;/a&gt;安装javadoc类的源码&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mvn install:install-file -Dfile=D:/spymemcached-2.10.3-javadoc.jar -DgroupId=net.spy -DartifactId=spymemcached -Dversion=2.10.3 -Dpackaging=jar -Dclassifier=javadoc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      maven本地仓库安装jar
    
    </summary>
    
      <category term="Maven" scheme="zhangweiheu.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="zhangweiheu.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>实习月度总结</title>
    <link href="zhangweiheu.github.io/2015/11/21/%E5%AE%9E%E4%B9%A0%E4%B8%80%E4%B8%AA%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    <id>zhangweiheu.github.io/2015/11/21/实习一个月总结/</id>
    <published>2015-11-21T13:49:03.000Z</published>
    <updated>2016-05-15T09:10:25.800Z</updated>
    
    <content type="html">&lt;p&gt;　　一个月了，简单写一下这一个月的进步。&lt;/p&gt;
&lt;h3 id=&quot;技术&quot;&gt;&lt;a href=&quot;#技术&quot; class=&quot;headerlink&quot; title=&quot;技术&quot;&gt;&lt;/a&gt;技术&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JIRA和Gitlab可以正常使用的水平，没有什么可说的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git&lt;br&gt;　　git一个可以用来进行分布式开发的集成工具，用仓库的方式对各个项目代码进行托管和管理。git对于开发者来说是一个非常好的工具，这也是目前开源的分享方式之一。git pull,push,clone,rebase,merge,branch,checkout等基础命令对于新手来说基本足够。深入学习可以阅读《Pro Git》。Sourcetree是一个非常好的图形化工具，一开始都不敢动这些代码，担心出现问题，造成不必要的麻烦，所以每次都非常小心，不过这一周也算是过了这个阶段，自己可以大胆去尝试了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;maven&lt;br&gt;　　对于maven的用法无非是：对项目生命周期的管理、插件的使用、聚合和继承、依赖冲突的管理、项目打包发布、版本管理。在项目生命周期的基础上，分阶段进行管理，衍生出相应的小的工具，每一个小工具都成长为今天的mvn命令。项目打包方式有jar,war,pom形式，对于聚合和继承的父包，只能打包成pom的形式。&lt;br&gt;jar的版本管理主要是使用坐标定位groupid,artifactid,version;scope;等参数的使用。深入学习可以用《maven实战》。maven的实际使用也逐渐明白了，理论和实际能有一点互补，依赖的jar有就近原则（依赖路径最短），这个主要是maven的聚合和继承，这部分内容非常重要，也非常有用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;redis&lt;br&gt;　　redis是一种内存型数据库，相比于memcache，redis可以做到宕机不丢失数据，主要得益于他的save备份，redis对于开发者来说，可以作为缓存也可以当做数据库，无论当做什么，都摆脱不了它基于5大对象和基本数据结构的存储规则。redis基本不需要什么优化，如果说需要的话那只是在使用的层面上进行优化，什么样的数据选择什么样的对象，什么样的数据选择什么样的生存时间，什么样的数据适合使用内存，使用内存的效率是否得到提高?当用缓存的时候，命中率是否达到最大？都是在使用层面。所以实战才能出经验，不能滥用内存，毕竟内存宝贵。深入学习可以用《Redis实战》。在项目中主要是用Spring-data-redis管理，使用jedis进行池化，在代码中主要是用RedisTemplate进行操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hibernate-Validator&lt;br&gt;　　validator校验器接触以后感觉真的很强大，校验字段，集合，以及参数，甚至集合中对象的字段也可以校验。对于hibernate-validator的原理，目前来看应该是使用拦截器技术，请求数据的校验发生在requestmapping之前。本身提供的基础数据类型校验也基本能够满足项目需要。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;properties文件配置&lt;br&gt;　　这一个根据向先文哥请教，理解了一些实现原理，通过这个跟体现出多问为什么的重要性，有些东西虽然我自己也有想法和认识，但是局限于自己的经验，并不会理解很深，有时候简单的做法，虽然一看就知道，但是要说出为什么这样用，好处都是什么，却是比较难的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;项目结构&lt;br&gt;　　一个月时间基本熟悉了各个包，知道了怎么下手，在仁坤哥的协助下做了一个krlass后端，短邮平台也了解挺多，目前来看，参与平台重构的话，在RabbitMQ上还不太会，不过通过参与模块划分和构建，对于架构设计也是有点兴趣。虽然如此，依旧任务挺重，不会的还是蛮多的，细节性东西需要学的太多，而这些东西又都是潜移默化的作用，所以用笔记本记录下来，没事多翻翻。这一个月没遇到什么bug，主要是项目构建和工具使用问题比较多，所以还需要继续努力。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;规范&quot;&gt;&lt;a href=&quot;#规范&quot; class=&quot;headerlink&quot; title=&quot;规范&quot;&gt;&lt;/a&gt;规范&lt;/h3&gt;&lt;p&gt;　　代码规范和文档规范是一个开发者的素质体现，进入公司以后，本着彻底放弃已有的模式学习。想迅速强大的快捷途径就是“复制”他们的代码、习惯、规范；融入自己，加以改进。&lt;br&gt;　　代码方面：单一职责，MVC分离，代码自注释，驼峰命名，CRUD命名，method.type严格匹配，数据库表和字段设计要保证当前项目可用，以后可扩展的方式，避免过度考虑表设计，需求理解以后前后端先对接碰头，避免在有多种选择的情况下，造成耗时（选择多了各种问题就来了……）；&lt;br&gt;　　文档方面：每个接口命名和注释，解决的问题，使用方式，使用场景，请求参数，响应结果都要说明。&lt;/p&gt;
&lt;h3 id=&quot;团队&quot;&gt;&lt;a href=&quot;#团队&quot; class=&quot;headerlink&quot; title=&quot;团队&quot;&gt;&lt;/a&gt;团队&lt;/h3&gt;&lt;p&gt;　　团队非常nice，整个融资线、Java组成员都非常给力，团结向上，积极努力，能学到很多东西，也能和大家一起成长，这点是非常重要的，反正我是超级喜欢。这一个月认识了Java组成员，业务线成员，当然还有两位技术VP，其他的虽然总是见面，不过没怎么认识，还有两个月，会认识更多人的。&lt;/p&gt;
&lt;p&gt;-&amp;gt;最后的话，还是要继续努力了，时间还有两个月了&amp;lt;-&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　一个月了，简单写一下这一个月的进步。&lt;/p&gt;
&lt;h3 id=&quot;技术&quot;&gt;&lt;a href=&quot;#技术&quot; class=&quot;headerlink&quot; title=&quot;技术&quot;&gt;&lt;/a&gt;技术&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JIRA和Gitlab可以正常使用的水平，没有什么可说的。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="zhangweiheu.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="实习" scheme="zhangweiheu.github.io/tags/%E5%AE%9E%E4%B9%A0/"/>
    
      <category term="总结" scheme="zhangweiheu.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>实习开始</title>
    <link href="zhangweiheu.github.io/2015/11/05/%E5%AE%9E%E4%B9%A0%E5%BC%80%E5%A7%8B/"/>
    <id>zhangweiheu.github.io/2015/11/05/实习开始/</id>
    <published>2015-11-05T15:50:42.000Z</published>
    <updated>2016-05-15T09:12:10.692Z</updated>
    
    <content type="html">&lt;p&gt;　　谨以此文纪念实习开端.&lt;/p&gt;
&lt;h4 id=&quot;团队&quot;&gt;&lt;a href=&quot;#团队&quot; class=&quot;headerlink&quot; title=&quot;团队&quot;&gt;&lt;/a&gt;团队&lt;/h4&gt;&lt;p&gt;　　这是一个积极的团队,大家彼此相互尊重,相互信任,相互配合,相互理解,高效的完成开发工作.每周例会实质上就是大家拿出自己的看法和意见,没有保留,这是一种非常好的氛围和状态,技术VP和我们一同参加例会,其实不知道他的身份,就能看出他的气场和能力都是非常强的.两个技术VP这两天算是都见过了,也都相互认识了. &lt;/p&gt;
&lt;h4 id=&quot;技术&quot;&gt;&lt;a href=&quot;#技术&quot; class=&quot;headerlink&quot; title=&quot;技术&quot;&gt;&lt;/a&gt;技术&lt;/h4&gt;&lt;p&gt;　　今天也算是领到了一个任务,任务不大,但是依旧具有挑战性,因为在这么短的时间内熟悉框架和项目结构也是蛮拼的,不过我非常喜欢这种挑战.&lt;br&gt;　　整个Java开发组的同事都非常nice,大家都很忙,如果我有问题,他们依旧放下手中的活给我答疑解惑.对于开发人员来说这种中断是大忌,真的非常感谢大家无保留的教导.  &lt;/p&gt;
&lt;h4 id=&quot;实习目标&quot;&gt;&lt;a href=&quot;#实习目标&quot; class=&quot;headerlink&quot; title=&quot;实习目标&quot;&gt;&lt;/a&gt;实习目标&lt;/h4&gt;&lt;p&gt;　　实习的主要目的无非就是双向选择,无论双方是否能达成一致,我感觉这段实习经历都是非常美好的.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　谨以此文纪念实习开端.&lt;/p&gt;
&lt;h4 id=&quot;团队&quot;&gt;&lt;a href=&quot;#团队&quot; class=&quot;headerlink&quot; title=&quot;团队&quot;&gt;&lt;/a&gt;团队&lt;/h4&gt;&lt;p&gt;　　这是一个积极的团队,大家彼此相互尊重,相互信任,相互配合,相互理解,高效的完成开发工作.每周例
    
    </summary>
    
      <category term="生活" scheme="zhangweiheu.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="zhangweiheu.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="实习" scheme="zhangweiheu.github.io/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vim快捷键</title>
    <link href="zhangweiheu.github.io/2015/11/02/Vim%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>zhangweiheu.github.io/2015/11/02/Vim快捷键/</id>
    <published>2015-11-02T14:49:13.000Z</published>
    <updated>2016-05-15T09:12:21.723Z</updated>
    
    <content type="html">&lt;p&gt;　　宇宙中最强大的编辑器之一,程序猿必备操作.&lt;/p&gt;
&lt;h4 id=&quot;基础命令&quot;&gt;&lt;a href=&quot;#基础命令&quot; class=&quot;headerlink&quot; title=&quot;基础命令&quot;&gt;&lt;/a&gt;基础命令&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;:e filename　　打开文件编辑  &lt;/li&gt;
&lt;li&gt;:w　　保存文件  &lt;/li&gt;
&lt;li&gt;:q　　退出编辑器  &lt;/li&gt;
&lt;li&gt;:q!　　退出但不保存&lt;/li&gt;
&lt;li&gt;:x　　Write file (if changes has been made) and exit&lt;/li&gt;
&lt;li&gt;.　　Repeats the last change made in normal mode&lt;/li&gt;
&lt;li&gt;5.　　Repeats 5 times the last change made in normal mode&lt;/li&gt;
&lt;li&gt;:sav filename　　Saves file as filename &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;剪切、复制和粘贴&quot;&gt;&lt;a href=&quot;#剪切、复制和粘贴&quot; class=&quot;headerlink&quot; title=&quot;剪切、复制和粘贴&quot;&gt;&lt;/a&gt;剪切、复制和粘贴&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;y　　Copy the selected text to clipboard&lt;/li&gt;
&lt;li&gt;p　　Paste clipboard contents&lt;/li&gt;
&lt;li&gt;dd　　Cut current line&lt;/li&gt;
&lt;li&gt;yy　　Copy current line&lt;/li&gt;
&lt;li&gt;y$　　Copy to end of line&lt;/li&gt;
&lt;li&gt;D　　Cut to end of line&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;在文件中移动&quot;&gt;&lt;a href=&quot;#在文件中移动&quot; class=&quot;headerlink&quot; title=&quot;在文件中移动&quot;&gt;&lt;/a&gt;在文件中移动&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;k or Up Arrow　　move the cursor up one line&lt;/li&gt;
&lt;li&gt;j or Down Arrow　　move the cursor down one line&lt;/li&gt;
&lt;li&gt;e　　move the cursor to the end of the word&lt;/li&gt;
&lt;li&gt;b　　move the cursor to the begining of the word&lt;/li&gt;
&lt;li&gt;0　　move the cursor to the begining of the line&lt;/li&gt;
&lt;li&gt;G　　move the cursor to the end of the line&lt;/li&gt;
&lt;li&gt;gg　　move the cursor to the begining of the file&lt;/li&gt;
&lt;li&gt;L　　move the cursor to the end of the file&lt;/li&gt;
&lt;li&gt;:59　　move cursor to line 59. Replace 59 by the desired line number.&lt;/li&gt;
&lt;li&gt;20|　　move cursor to column 20.&lt;/li&gt;
&lt;li&gt;%　　Move cursor to matching parenthesis&lt;/li&gt;
&lt;li&gt;[[　　Jump to function start&lt;/li&gt;
&lt;li&gt;[{　　Jump to block start&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;搜索&quot;&gt;&lt;a href=&quot;#搜索&quot; class=&quot;headerlink&quot; title=&quot;搜索&quot;&gt;&lt;/a&gt;搜索&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;/word　　Search word from top to bottom&lt;/li&gt;
&lt;li&gt;?word　　Search word from bottom to top&lt;/li&gt;
&lt;li&gt;*　　Search the word under cursor&lt;/li&gt;
&lt;li&gt;/\cstring　　Search STRING or string, case insensitive&lt;/li&gt;
&lt;li&gt;/jo[ha]n　　Search john or joan&lt;/li&gt;
&lt;li&gt;/\&amp;lt; the　　Search the, theatre or then&lt;/li&gt;
&lt;li&gt;/the&gt;　　Search the or breathe&lt;/li&gt;
&lt;li&gt;/\&amp;lt; the&gt;　　Search the&lt;/li&gt;
&lt;li&gt;/\&amp;lt; ¦.&gt;　　Search all words of 4 letters&lt;/li&gt;
&lt;li&gt;/\/　　Search fred but not alfred or frederick&lt;/li&gt;
&lt;li&gt;/fred|joe　　Search fred or joe&lt;/li&gt;
&lt;li&gt;/\&amp;lt;\d\d\d\d&gt;　　Search exactly 4 digits&lt;/li&gt;
&lt;li&gt;/^\n{3}　　Find 3 empty lines&lt;/li&gt;
&lt;li&gt;:bufdo /searchstr/　　Search in all open files&lt;/li&gt;
&lt;li&gt;bufdo %s/something/somethingelse/g　　Search something in all the open buffers and replace it with somethingelse&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;替换&quot;&gt;&lt;a href=&quot;#替换&quot; class=&quot;headerlink&quot; title=&quot;替换&quot;&gt;&lt;/a&gt;替换&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;:%s/old/new/g　　Replace all occurences of old by new in file&lt;/li&gt;
&lt;li&gt;:%s/onward/forward/gi　　Replace onward by forward, case unsensitive&lt;/li&gt;
&lt;li&gt;:%s/old/new/gc　　Replace all occurences with confirmation&lt;/li&gt;
&lt;li&gt;:2,35s/old/new/g　　Replace all occurences between lines 2 and 35&lt;/li&gt;
&lt;li&gt;:5,$s/old/new/g　　Replace all occurences from line 5 to EOF&lt;/li&gt;
&lt;li&gt;:%s/^/hello/g　　Replace the begining of each line by hello&lt;/li&gt;
&lt;li&gt;:%s/$/Harry/g　　Replace the end of each line by Harry&lt;/li&gt;
&lt;li&gt;:%s/onward/forward/gi　　Replace onward by forward, case unsensitive&lt;/li&gt;
&lt;li&gt;:%s/*$//g　　Delete all white spaces&lt;/li&gt;
&lt;li&gt;:g/string/d　　Delete all lines containing string&lt;/li&gt;
&lt;li&gt;:v/string/d　　Delete all lines containing which didn’t contain string&lt;/li&gt;
&lt;li&gt;:s/Bill/Steve/　　Replace the first occurence of Bill by Steve in current line&lt;/li&gt;
&lt;li&gt;:s/Bill/Steve/g　　Replace Bill by Steve in current line&lt;/li&gt;
&lt;li&gt;:%s/Bill/Steve/g　　Replace Bill by Steve in all the file&lt;/li&gt;
&lt;li&gt;:%s/^M//g　　Delete DOS carriage returns (^M)&lt;/li&gt;
&lt;li&gt;:%s/\r/\r/g　　Transform DOS carriage returns in returns&lt;/li&gt;
&lt;li&gt;:%s#&amp;lt;[^&amp;gt;]+&amp;gt;##g　　Delete HTML tags but keeps text&lt;/li&gt;
&lt;li&gt;:%s/^(.*)\n\1$/\1/　　Delete lines which appears twice&lt;/li&gt;
&lt;li&gt;Ctrl+a　　Increment number under the cursor&lt;/li&gt;
&lt;li&gt;Ctrl+x　　Decrement number under cursor&lt;/li&gt;
&lt;li&gt;ggVGg?　　Change text to Rot13&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;大小写&quot;&gt;&lt;a href=&quot;#大小写&quot; class=&quot;headerlink&quot; title=&quot;大小写&quot;&gt;&lt;/a&gt;大小写&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Vu　　Lowercase line&lt;/li&gt;
&lt;li&gt;VU　　Uppercase line&lt;/li&gt;
&lt;li&gt;g~~　　Invert case&lt;/li&gt;
&lt;li&gt;vEU　　Switch word to uppercase&lt;/li&gt;
&lt;li&gt;vE~　　Modify word case&lt;/li&gt;
&lt;li&gt;ggguG　　Set all text to lowercase&lt;/li&gt;
&lt;li&gt;gggUG　　Set all text to uppercase&lt;/li&gt;
&lt;li&gt;:set ignorecase　　Ignore case in searches&lt;/li&gt;
&lt;li&gt;:set smartcase　　Ignore case in searches excepted if an uppercase letter is used&lt;/li&gt;
&lt;li&gt;:%s/\&amp;lt;./\u&amp;amp;/g　　Sets first letter of each word to uppercase&lt;/li&gt;
&lt;li&gt;:%s/\&amp;lt;./\l&amp;amp;/g　　Sets first letter of each word to lowercase&lt;/li&gt;
&lt;li&gt;:%s/.*/\u&amp;amp;　　Sets first letter of each line to uppercase&lt;/li&gt;
&lt;li&gt;:%s/.*/\l&amp;amp;　　Sets first letter of each line to lowercase&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;读写文件&quot;&gt;&lt;a href=&quot;#读写文件&quot; class=&quot;headerlink&quot; title=&quot;读写文件&quot;&gt;&lt;/a&gt;读写文件&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;:1,10 w outfile　　Saves lines 1 to 10 in outfile&lt;/li&gt;
&lt;li&gt;:1,10 w &amp;gt;&amp;gt; outfile　　Appends lines 1 to 10 to outfile&lt;/li&gt;
&lt;li&gt;:r infile　　Insert the content of infile&lt;/li&gt;
&lt;li&gt;:23r infile　　Insert the content of infile under line 23&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;文件浏览器&quot;&gt;&lt;a href=&quot;#文件浏览器&quot; class=&quot;headerlink&quot; title=&quot;文件浏览器&quot;&gt;&lt;/a&gt;文件浏览器&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;:e.　　Open integrated file explorer&lt;/li&gt;
&lt;li&gt;:Sex　　Split window and open integrated file explorer&lt;/li&gt;
&lt;li&gt;:Sex!　　Same as :Sex but split window vertically&lt;/li&gt;
&lt;li&gt;:browse e　　Graphical file explorer&lt;/li&gt;
&lt;li&gt;:ls　　List buffers&lt;/li&gt;
&lt;li&gt;:cd ..　　Move to parent directory&lt;/li&gt;
&lt;li&gt;:args　　List files&lt;/li&gt;
&lt;li&gt;:args *.php　　Open file list&lt;/li&gt;
&lt;li&gt;:grep expression *.php　　Returns a list of .php files contening expression&lt;/li&gt;
&lt;li&gt;gf　　Open file name under cursor&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;和-Unix-系统交互&quot;&gt;&lt;a href=&quot;#和-Unix-系统交互&quot; class=&quot;headerlink&quot; title=&quot;和 Unix 系统交互&quot;&gt;&lt;/a&gt;和 Unix 系统交互&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;:!pwd　　Execute the pwd unix command, then returns to Vi&lt;/li&gt;
&lt;li&gt;!!pwd　　Execute the pwd unix command and insert output in file&lt;/li&gt;
&lt;li&gt;:sh　　Temporary returns to Unix&lt;/li&gt;
&lt;li&gt;$exit　　Retourns to Vi&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;对齐&quot;&gt;&lt;a href=&quot;#对齐&quot; class=&quot;headerlink&quot; title=&quot;对齐&quot;&gt;&lt;/a&gt;对齐&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;:%!fmt　　Align all lines&lt;/li&gt;
&lt;li&gt;!}fmt　　Align all lines at the current position&lt;/li&gt;
&lt;li&gt;5!!fmt　　Align the next 5 lines&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Tabs-Windows&quot;&gt;&lt;a href=&quot;#Tabs-Windows&quot; class=&quot;headerlink&quot; title=&quot;Tabs/Windows　&quot;&gt;&lt;/a&gt;Tabs/Windows　&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;:tabnew　　Creates a new tab&lt;/li&gt;
&lt;li&gt;gt　　Show next tab&lt;/li&gt;
&lt;li&gt;:tabfirst　　Show first tab&lt;/li&gt;
&lt;li&gt;:tablast　　Show last tab&lt;/li&gt;
&lt;li&gt;:tabm n(position)　　Rearrange tabs&lt;/li&gt;
&lt;li&gt;:tabdo %s/foo/bar/g　　Execute a command in all tabs&lt;/li&gt;
&lt;li&gt;:tab ball　　Puts all open files in tabs&lt;/li&gt;
&lt;li&gt;:new abc.txt　　Edit abc.txt in new window&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;分屏显示&quot;&gt;&lt;a href=&quot;#分屏显示&quot; class=&quot;headerlink&quot; title=&quot;分屏显示&quot;&gt;&lt;/a&gt;分屏显示&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;:e filename　　Edit filename in current window&lt;/li&gt;
&lt;li&gt;:split filename　　Split the window and open filename&lt;/li&gt;
&lt;li&gt;ctrl-w up arrow　　Puts cursor in top window&lt;/li&gt;
&lt;li&gt;ctrl-w ctrl-w　　Puts cursor in next window&lt;/li&gt;
&lt;li&gt;ctrl-w_　　Maximize current window vertically&lt;/li&gt;
&lt;li&gt;ctrl-w|　　Maximize current window horizontally&lt;/li&gt;
&lt;li&gt;ctrl-w=　　Gives the same size to all windows&lt;/li&gt;
&lt;li&gt;10 ctrl-w+　　Add 10 lines to current window&lt;/li&gt;
&lt;li&gt;:vsplit file　　Split window vertically&lt;/li&gt;
&lt;li&gt;:sview file　　Same as :split in readonly mode&lt;/li&gt;
&lt;li&gt;:hide　　Close current window&lt;/li&gt;
&lt;li&gt;:­nly　　Close all windows, excepted current&lt;/li&gt;
&lt;li&gt;:b 2　　Open #2 in this window&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;自动完成&quot;&gt;&lt;a href=&quot;#自动完成&quot; class=&quot;headerlink&quot; title=&quot;自动完成&quot;&gt;&lt;/a&gt;自动完成&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Ctrl+n Ctrl+p (in insert mode)　　Complete word&lt;/li&gt;
&lt;li&gt;Ctrl+x Ctrl+l　　Complete line&lt;/li&gt;
&lt;li&gt;:set dictionary=dict　　Define dict as a dictionnary&lt;/li&gt;
&lt;li&gt;Ctrl+x Ctrl+k　　Complete with dictionnary&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Marks&quot;&gt;&lt;a href=&quot;#Marks&quot; class=&quot;headerlink&quot; title=&quot;Marks&quot;&gt;&lt;/a&gt;Marks&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;m{a-z} 　　Marks current position as {a-z}&lt;/li&gt;
&lt;li&gt;‘{a-z}　　Move to position {a-z}&lt;/li&gt;
&lt;li&gt;‘’　　Move to previous position&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;缩写&quot;&gt;&lt;a href=&quot;#缩写&quot; class=&quot;headerlink&quot; title=&quot;缩写&quot;&gt;&lt;/a&gt;缩写&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;:ab mail mail@provider.org　　Define mail as abbreviation of mail@provider.org&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;文本缩进&quot;&gt;&lt;a href=&quot;#文本缩进&quot; class=&quot;headerlink&quot; title=&quot;文本缩进&quot;&gt;&lt;/a&gt;文本缩进&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;:set autoindent　　Turn on auto-indent&lt;/li&gt;
&lt;li&gt;:set smartindent　　Turn on intelligent auto-indent&lt;/li&gt;
&lt;li&gt;:set shiftwidth=4　　Defines 4 spaces as indent size&lt;/li&gt;
&lt;li&gt;ctrl-t, ctrl-d　　Indent/un-indent in insert mode  &lt;/li&gt;
&lt;li&gt;‘&amp;gt;&amp;gt;　　Indent&lt;/li&gt;
&lt;li&gt;&amp;lt;&amp;lt;　　Un-indent&lt;/li&gt;
&lt;li&gt;=%　　Indent the code between parenthesis&lt;/li&gt;
&lt;li&gt;1GVG=　　Indent the whole file&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;语法高亮&quot;&gt;&lt;a href=&quot;#语法高亮&quot; class=&quot;headerlink&quot; title=&quot;语法高亮&quot;&gt;&lt;/a&gt;语法高亮&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;:syntax o　　Turn on syntax highlighting&lt;/li&gt;
&lt;li&gt;:syntax off　　Turn off syntax highlighting&lt;/li&gt;
&lt;li&gt;:set syntax=perl　　Force syntax highlighting&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　宇宙中最强大的编辑器之一,程序猿必备操作.&lt;/p&gt;
&lt;h4 id=&quot;基础命令&quot;&gt;&lt;a href=&quot;#基础命令&quot; class=&quot;headerlink&quot; title=&quot;基础命令&quot;&gt;&lt;/a&gt;基础命令&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;:e filename　　打开文件编辑  &lt;/li
    
    </summary>
    
      <category term="Linux" scheme="zhangweiheu.github.io/categories/Linux/"/>
    
    
      <category term="Vim" scheme="zhangweiheu.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Java五大原则</title>
    <link href="zhangweiheu.github.io/2015/10/13/Java%E4%BA%94%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <id>zhangweiheu.github.io/2015/10/13/Java五大原则/</id>
    <published>2015-10-13T11:57:28.000Z</published>
    <updated>2016-05-15T08:58:01.861Z</updated>
    
    <content type="html">&lt;p&gt;本篇文章是对秦小波编写的&lt;a href=&quot;http://baike.baidu.com/view/3308505.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《设计模式之禅》(第二版)&lt;/a&gt;的部分内容的学习总结，如有不足之处欢迎指正。&lt;/p&gt;
&lt;h3 id=&quot;单一职责原则-Single-Responsibility-Principle&quot;&gt;&lt;a href=&quot;#单一职责原则-Single-Responsibility-Principle&quot; class=&quot;headerlink&quot; title=&quot;单一职责原则(Single Responsibility Principle)&quot;&gt;&lt;/a&gt;单一职责原则(Single Responsibility Principle)&lt;/h3&gt;&lt;h4 id=&quot;概念解释：&quot;&gt;&lt;a href=&quot;#概念解释：&quot; class=&quot;headerlink&quot; title=&quot;概念解释：&quot;&gt;&lt;/a&gt;概念解释：&lt;/h4&gt;&lt;p&gt;  一个类或者接口最多只有一个原因引起变化.&lt;br&gt;  单一职责提出了一个编写程序的标准，用“职责”或者“变化原因”来衡量接口或者类设计的是否优良，但是“职责”和“变化原因”都是不可衡量的,因项目而异，因环境而异.  &lt;/p&gt;
&lt;h4 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点:&quot;&gt;&lt;/a&gt;优点:&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;类的复杂性降低,实现什么职责都有清晰明确的定义;   &lt;/li&gt;
&lt;li&gt;可读性提高，复杂性降低;  &lt;/li&gt;
&lt;li&gt;可维护性提高，可读性提高;   &lt;/li&gt;
&lt;li&gt;变更引起的风险降低;&lt;br&gt;注：接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;里氏替换原则-Liskov-Substitution-Principle&quot;&gt;&lt;a href=&quot;#里氏替换原则-Liskov-Substitution-Principle&quot; class=&quot;headerlink&quot; title=&quot;里氏替换原则(Liskov Substitution Principle)&quot;&gt;&lt;/a&gt;里氏替换原则(Liskov Substitution Principle)&lt;/h3&gt;&lt;h4 id=&quot;四层概念解释&quot;&gt;&lt;a href=&quot;#四层概念解释&quot; class=&quot;headerlink&quot; title=&quot;四层概念解释:&quot;&gt;&lt;/a&gt;四层概念解释:&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;子类必须完全实现父类的方法;   &lt;/li&gt;
&lt;li&gt;子类可以有自己的个性;   &lt;/li&gt;
&lt;li&gt;覆盖或者实现父类的方法时输入参数可以被放大;&lt;br&gt;子类方法中的前置条件必须与超类中被覆写的方法的前置条件相同或者更宽松   &lt;/li&gt;
&lt;li&gt;覆写或者实现父类的方法时输出结果可以被缩小;&lt;br&gt;注:父类出现的地方子类一定可以出现，反之不一定&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;依赖倒置原则-Dependence-Inversion-Principle&quot;&gt;&lt;a href=&quot;#依赖倒置原则-Dependence-Inversion-Principle&quot; class=&quot;headerlink&quot; title=&quot;依赖倒置原则(Dependence Inversion Principle)&quot;&gt;&lt;/a&gt;依赖倒置原则(Dependence Inversion Principle)&lt;/h3&gt;&lt;h4 id=&quot;三层概念解释&quot;&gt;&lt;a href=&quot;#三层概念解释&quot; class=&quot;headerlink&quot; title=&quot;三层概念解释:&quot;&gt;&lt;/a&gt;三层概念解释:&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;高层模块不应该依赖底层模块，都应该依赖其抽象;&lt;/li&gt;
&lt;li&gt;抽象模块不应该依赖细节;&lt;/li&gt;
&lt;li&gt;细节应该依赖抽象;&lt;br&gt;注：抽象就是指接口或者抽象类，细节就实现类&lt;br&gt;依赖倒置原则在Java语言中的精简定义就是面向接口编程.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;依赖的三种写法：&quot;&gt;&lt;a href=&quot;#依赖的三种写法：&quot; class=&quot;headerlink&quot; title=&quot;依赖的三种写法：&quot;&gt;&lt;/a&gt;依赖的三种写法：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;构造函数传递依赖对象;&lt;/li&gt;
&lt;li&gt;Setter方法传递依赖对象;&lt;/li&gt;
&lt;li&gt;接口声明依赖对象(也叫接口注入);&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;对倒置的解释&quot;&gt;&lt;a href=&quot;#对倒置的解释&quot; class=&quot;headerlink&quot; title=&quot;对倒置的解释&quot;&gt;&lt;/a&gt;对倒置的解释&lt;/h4&gt;&lt;p&gt;依赖正置：就是类间的依赖是实实在在的的实现类间的依赖，也就是面向实现编程。而编写程序需要的是对现实世界的事物进行抽象，抽象的结果就是抽象类和接口，然后我们根据系统设计的需要产生了抽象间的依赖，代替了人们传统思维中事物的依赖，“倒置”就是从这里产生.&lt;/p&gt;
&lt;h4 id=&quot;最佳实践原则：&quot;&gt;&lt;a href=&quot;#最佳实践原则：&quot; class=&quot;headerlink&quot; title=&quot;最佳实践原则：&quot;&gt;&lt;/a&gt;最佳实践原则：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;每个类尽量都有接口或者抽象类，或者抽象类和接口两者兼备;&lt;/li&gt;
&lt;li&gt;变量的表面类型尽量是接口或者抽象类;&lt;/li&gt;
&lt;li&gt;任何类都不应该从具体类派生;&lt;/li&gt;
&lt;li&gt;尽量不要覆写基类的方法;&lt;/li&gt;
&lt;li&gt;结合里氏替换原则使用;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;接口隔离原则-Interface-Segregation-Principle&quot;&gt;&lt;a href=&quot;#接口隔离原则-Interface-Segregation-Principle&quot; class=&quot;headerlink&quot; title=&quot;接口隔离原则(Interface Segregation Principle)&quot;&gt;&lt;/a&gt;接口隔离原则(Interface Segregation Principle)&lt;/h3&gt;&lt;h4 id=&quot;接口类型&quot;&gt;&lt;a href=&quot;#接口类型&quot; class=&quot;headerlink&quot; title=&quot;接口类型&quot;&gt;&lt;/a&gt;接口类型&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;实例接口(Object Interface),在Java中声明一个类，然后new关键字产生一个实例，这个类称为实例接口.&lt;/li&gt;
&lt;li&gt;类接口(Class Interface),Java中进经常使用Interface关键字定义的接口.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;隔离定义&quot;&gt;&lt;a href=&quot;#隔离定义&quot; class=&quot;headerlink&quot; title=&quot;隔离定义&quot;&gt;&lt;/a&gt;隔离定义&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;客户端不应该依赖它不需要的接口;&lt;/li&gt;
&lt;li&gt;类间的依赖应该建立在最小接口上;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;约束规范&quot;&gt;&lt;a href=&quot;#约束规范&quot; class=&quot;headerlink&quot; title=&quot;约束规范&quot;&gt;&lt;/a&gt;约束规范&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;接口尽量小(方法少，接口隔离原则拆分接口时，首先必须满足单一职责原则);&lt;/li&gt;
&lt;li&gt;接口要高内聚;&lt;/li&gt;
&lt;li&gt;定制服务(单独为个体提供定制接口);&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;实践规则&quot;&gt;&lt;a href=&quot;#实践规则&quot; class=&quot;headerlink&quot; title=&quot;实践规则&quot;&gt;&lt;/a&gt;实践规则&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;一个接口只服务于一个子模块或者业务逻辑;&lt;/li&gt;
&lt;li&gt;已经被污染的接口，尽量去修改，若变更的风险大，则采用适配器模式进行转化处理;&lt;/li&gt;
&lt;li&gt;了解环境，拒绝盲目依赖原则;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;迪米特法则（Law-of-Demeter）&quot;&gt;&lt;a href=&quot;#迪米特法则（Law-of-Demeter）&quot; class=&quot;headerlink&quot; title=&quot;迪米特法则（Law of Demeter）&quot;&gt;&lt;/a&gt;迪米特法则（Law of Demeter）&lt;/h3&gt;&lt;h4 id=&quot;概念解释&quot;&gt;&lt;a href=&quot;#概念解释&quot; class=&quot;headerlink&quot; title=&quot;概念解释&quot;&gt;&lt;/a&gt;概念解释&lt;/h4&gt;&lt;p&gt;迪米特法则的核心观念就是类间解耦，弱耦合，只有弱耦合了以后，类的复用率才可以提高.&lt;/p&gt;
&lt;h3 id=&quot;开闭原则-Open-Close-Principle&quot;&gt;&lt;a href=&quot;#开闭原则-Open-Close-Principle&quot; class=&quot;headerlink&quot; title=&quot;开闭原则(Open Close Principle)&quot;&gt;&lt;/a&gt;开闭原则(Open Close Principle)&lt;/h3&gt;&lt;h4 id=&quot;概念定义&quot;&gt;&lt;a href=&quot;#概念定义&quot; class=&quot;headerlink&quot; title=&quot;概念定义&quot;&gt;&lt;/a&gt;概念定义&lt;/h4&gt;&lt;p&gt;一个软件实体如类、模块和函数都应该对修改关闭，对扩展开放&lt;/p&gt;
&lt;h4 id=&quot;开闭原则的意义&quot;&gt;&lt;a href=&quot;#开闭原则的意义&quot; class=&quot;headerlink&quot; title=&quot;开闭原则的意义&quot;&gt;&lt;/a&gt;开闭原则的意义&lt;/h4&gt;&lt;p&gt;只要是面向对象编程，在开发中都会用到开闭原则，开闭原则是以上五个原则的具体形态，是其精髓.&lt;/p&gt;
&lt;p&gt;&lt;a rel=&quot;external&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/cn/&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-nc-sa/3.0/cn/88x31.png&quot;&gt;&lt;/a&gt;&lt;br&gt;本作品采用&lt;a rel=&quot;external&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/cn/&quot; target=&quot;_blank&quot;&gt;知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议&lt;/a&gt;进行许可。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Java五大原则
    
    </summary>
    
      <category term="设计模式之禅" scheme="zhangweiheu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85/"/>
    
    
      <category term="Java" scheme="zhangweiheu.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="zhangweiheu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
